#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"f_sharp","languageName":"python"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# ðŸš€ Polyglot Kernel Verification

This notebook tests both **F#** and **Python** kernels using proper `.dib` format with magic commands.

## Setup Instructions

1. **Update your existing f_sharp environment**:
   ```bash
   conda env update -f environment.yml
   conda activate f_sharp
   python -m ipykernel install --user --name=f_sharp --display-name "Python (f_sharp)" --force
   ```

2. **Verify .NET SDK**:
   ```bash
   dotnet --version
   dotnet tool install -g Microsoft.dotnet-interactive
   dotnet interactive jupyter install
   ```

3. **In VS Code**: Open this `.dib` file and select kernels when prompted.

#!markdown

#!about

#!markdown

#!connect jupyter --kernel-name .net-fsharp --kernel-spec .net-fsharp

#!fsharp

#!connect jupyter --kernel-name f_sharp --kernel-spec f_sharp

#!fsharp

#!.net-fsharp

// F# computation with clean display
let squareResult = 7 * 7
let addResult = 3 + 4

// Display results cleanly
printfn "F# Results:"
printfn "square(7) = %d" squareResult
printfn "add(3,4) = %d" addResult

#!f_sharp

#!f_sharp

# Python Test: Equivalent operations
def square(x):
    return x * x

def add(a, b):
    return a + b

# Test the functions
result = square(7)
sum_result = add(3, 4)

print("Python Results:")
print(f"square(7) = {result}")
print(f"add(3,4) = {sum_result}")

# Done - no standalone expressions to avoid duplicate outputs

#!markdown

## âœ… Expected Results

Both cells should produce:
- `square(7) = 49`
- `add(3,4) = 7`

If both work, your polyglot environment is ready!

## ðŸŽ¯ Next: Module Development

Ready to create your first lesson notebook:
- `module1_logic_proofs.dib` - F# focused mathematical proofs
- `module2_linear_algebra.dib` - F# + Python numerical work

#!markdown

## ðŸ§ª Testing F# String Building Approach

Let's test if we can build complete output strings in F# and display them with minimal Python code.

### Test 1: Basic String Building in F#

#!csharp

#!.net-fsharp

// F# string building and display approach
let typeExample1 = "let divides (d: int) (n: int) : bool = n % d = 0"
let typeExample2 = "let square (x: int) : int = x * x"

// Do actual computations
let testDivides = 12 % 3 = 0
let testSquare = 7 * 7

// Build and display complete output in F#
printfn "F# Type Annotations Test:"
printfn "// Basic type annotations in F#"
printfn "%s" typeExample1
printfn "%s" typeExample2
printfn ""
printfn "Test Results:"
printfn "divides 3 12 = %b" testDivides
printfn "square 7 = %d" testSquare
printfn ""
printfn "âœ… All computed and displayed in F#!"

#!markdown

### Test 2: Advanced F# String Building Patterns

Let's test different string building approaches in F#:

#!csharp

#!.net-fsharp

// Test different F# string building and display patterns

// Pattern 1: Direct printfn approach
let displaySection1 title examples results =
    printfn "%s:" title
    examples |> List.iter (fun ex -> printfn "// %s" ex)
    printfn ""
    printfn "Test Results:"
    results |> List.iter (fun (desc, value) -> printfn "%s = %s" desc value)

// Pattern 2: String building then single print
let buildAndDisplay title examples results =
    let output = 
        let header = $"{title}:\n"
        let exampleLines = examples |> List.map (fun ex -> $"// {ex}") |> String.concat "\n"
        let resultLines = results |> List.map (fun (desc, value) -> $"{desc} = {value}") |> String.concat "\n"
        header + exampleLines + "\n\nTest Results:\n" + resultLines
    printfn "%s" output

// Test data
let examples = [
    "let identity x = x"
    "let swap (x, y) = (y, x)"
]

let results = [
    ("identity 42", "42")
    ("swap (1, \"hello\")", "(\"hello\", 1)")
]

// Display using pattern 1
printfn "=== Pattern 1: Direct printfn ==="
displaySection1 "Parametric Polymorphism" examples results

printfn "\n=== Pattern 2: String building ==="
buildAndDisplay "Parametric Polymorphism (String Builder)" examples results

#!markdown

### ðŸŽ¯ Clean F# Approach - Results Summary

**SUCCESS: F# handles both computation AND display cleanly!**

âœ… **No duplicate output** when F# logic is separated from display
âœ… **Two clean patterns work perfectly:**

1. **Direct printfn approach**: Use `printfn` statements for immediate display
2. **String building approach**: Build formatted strings then display with single `printfn`

**Key insight**: The duplicate issue was caused by F# expressions returning values that get echoed. When we use:
- Functions that return `unit` (like `printfn`)
- Variable bindings (which don't echo)
- Proper separation of computation from display

F# works perfectly without any duplicates!

**Implementation Strategy for lessons:**
```fsharp
// Computation (no duplicates)
let result = someComputation()

// Display (clean output)  
printfn "Result: %A" result
```

**No need for Python display cells - F# handles everything cleanly!**

#!markdown

### Test 3: Function Sharing Between Kernels

Now let's test if Python can access **F# functions** (not just strings). This is crucial for interactive lessons where students might want to call F# functions from Python.

#!csharp

#!.net-fsharp

// F# function definitions and demonstrations
let simpleSquare x = x * x
let dividesFunction d n = n % d = 0
let polymorphicIdentity x = x
let curryedAdd x y = x + y

let listProcessor lst = 
    lst |> List.map (fun x -> x * 2) |> List.filter (fun x -> x > 5)

// Higher-order function
let applyFunction f x = f x

// Demonstrate functions with clean F# output
printfn "F# Function Demonstrations:"
printfn "=========================="
printfn ""

printfn "1. simpleSquare:"
printfn "   simpleSquare 5 = %d" (simpleSquare 5)
printfn "   simpleSquare 7 = %d" (simpleSquare 7)
printfn ""

printfn "2. dividesFunction:"
printfn "   dividesFunction 3 12 = %b" (dividesFunction 3 12)
printfn "   dividesFunction 5 12 = %b" (dividesFunction 5 12)
printfn ""

printfn "3. polymorphicIdentity:"
printfn "   polymorphicIdentity 42 = %d" (polymorphicIdentity 42)
printfn "   polymorphicIdentity \"hello\" = %s" (polymorphicIdentity "hello")
printfn ""

printfn "4. curryedAdd:"
printfn "   curryedAdd 3 4 = %d" (curryedAdd 3 4)
printfn "   (curryedAdd 10) 5 = %d" ((curryedAdd 10) 5)
printfn ""

printfn "5. listProcessor:"
printfn "   listProcessor [1; 2; 3; 4; 5] = %A" (listProcessor [1; 2; 3; 4; 5])
printfn ""

printfn "6. applyFunction (higher-order):"
printfn "   applyFunction simpleSquare 6 = %d" (applyFunction simpleSquare 6)
printfn ""

printfn "âœ… All functions work and display cleanly in F#!"

#!markdown

### ðŸŽ‰ Clean F# Functions - No Cross-Kernel Needed!

**Perfect solution**: F# functions work beautifully when demonstrated entirely within F#!

**Benefits of the pure F# approach:**
1. **No duplicate output** - functions and their results display cleanly
2. **Rich demonstrations** - can show multiple examples per function
3. **Type polymorphism** - can demonstrate with different types
4. **Higher-order functions** - can compose and apply functions
5. **No kernel complexity** - everything stays in F#

**Best practice for lessons**: 
- Define F# functions 
- Demonstrate them with multiple examples
- Display results with `printfn`
- Use Python only for separate, Python-specific content

This approach is perfect for mathematical and functional programming lessons!

#!csharp

#!.net-fsharp

// Final test: Complex function demonstrations in clean F#
let buildFunctionDemo funcName funcDef examples =
    printfn "F# Function: %s" funcName
    printfn "%s" funcDef
    printfn ""
    printfn "Examples:"
    examples |> List.iter (fun (input, output) -> printfn "%s %s = %s" funcName input output)
    printfn ""

// Demonstrate multiple functions cleanly
printfn "=== Complex Function Demonstrations ==="
printfn ""

buildFunctionDemo 
    "square" 
    "let square x = x * x"
    [("1", "1"); ("2", "4"); ("3", "9"); ("7", "49")]

buildFunctionDemo
    "divides"
    "let divides d n = n % d = 0" 
    [("3 12", "true"); ("5 12", "false"); ("2 8", "true")]

buildFunctionDemo
    "fibonacci"
    "let rec fib n = if n <= 1 then n else fib(n-1) + fib(n-2)"
    [("0", "0"); ("1", "1"); ("5", "5"); ("8", "21")]

printfn "âœ… Complex demonstrations work perfectly in pure F#!"
printfn "âœ… No duplicates, clean output, full functionality!"
printfn "âœ… Ready for lesson development!"
