#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

---

## üß† Lesson 1 ‚Äî Getting Started with the F# Interactive

### üîç Purpose
This lesson introduces learners to the F# Interactive environment (FSI) using the Polyglot Notebook kernel. The goal is to build comfort entering expressions, interpreting output, and understanding the REPL-driven development workflow.

---

### üìå Learning Objectives
By the end of this lesson, learners should be able to:
- Open and execute a `.dib` notebook with F# cells
- Enter and evaluate arithmetic expressions in F# Interactive
- Observe how F# infers types and displays results
- Understand the basics of functional expressions and immutability

---

### üß± Concepts to Introduce
- The nature of an F# REPL / FSI session
- F# syntax for numbers, booleans, and function application
- Type inference: how F# determines the type of an expression
- Binding values using `let`
- Simple error handling: what happens when syntax is incorrect

---

#!markdown

### üìã Lesson Outline

| Cell | Section | Content | Textbook Reference |
|------|---------|---------|-------------------|
| **1** | **Lesson Overview** | Purpose, objectives, and concepts to introduce | Introduction |
| **2** | **FSI & REPL Basics** | Basic arithmetic with `pown` and floating point operations<br/>Boolean expressions and logical operators | Section 1.1 equivalent |
| **3-4** | **Divisibility Theory** | Mathematical definition of `divides`<br/>F# implementation and testing | Section 1.2 start |
| **5-6** | **Least Divisor Theory** | LD(n) definition and mathematical propositions<br/>Complete `ldf` and `ld` algorithm implementation | Section 1.2 core |
| **7-8** | **Prime Testing** | `prime0` function combining all concepts<br/>Comprehensive testing with edge cases | Section 1.2 application |
| **9-10** | **Interactive Exercises** | Following textbook examples (like `ld 91`)<br/>Step-by-step algorithm exploration | REPL practice |
| **11-12** | **Summary & Advanced** | Textbook section mapping<br/>Mathematical verification of Proposition 1.2<br/>Efficiency analysis | Synthesis |

---

### üéØ Learning Path

```
FSI Basics ‚Üí Divisibility ‚Üí Least Divisor ‚Üí Prime Testing ‚Üí Practice ‚Üí Mastery
```

**Key Mathematical Concepts:**
- **Divisibility relation** (`d | n`)
- **Proposition 1.2** (LD properties and proofs)
- **Algorithmic efficiency** (‚àön bound)
- **REPL-driven mathematical exploration**

---

#!csharp

#!about

#!markdown

## 1. Starting up FSI & Exploring the REPL

F# Interactive (FSI) is our gateway to functional programming and mathematical exploration. Unlike compiled programs, the REPL (Read-Eval-Print Loop) lets us experiment with expressions immediately.

### üöÄ Getting Started with F# Interactive

In this notebook, each F# cell acts like the FSI prompt. We can evaluate expressions, define functions, and explore mathematical concepts interactively.

---

### üìä Basic Arithmetic in F#

Let's start with fundamental arithmetic operations, just as we would in FSI:

#!fsharp

// Basic printing with newline
printfn "Result: %d" (2 + 3 * 4)

// Multiple values
printfn "2 + 3 * 4 = %d" (2 + 3 * 4)
printfn "pown 2 16 = %d" (pown 2 16)
printfn "2.0 ** 4.0 = %f" (2.0 ** 4.0)

#!markdown

### üîó Boolean Expressions and Logic

F# provides logical operators that will be essential for our mathematical reasoning:

#!fsharp

// Boolean operations (following Haskell Road)
printfn "%b" (true && false)

// Logical NOT with modular arithmetic
printfn "%b" (not (5 % 2 = 0))

// More complex logical expressions
printfn "%b" ((3 > 2) && (4 < 10))
printfn "%b" ((5 = 5) || (6 <> 7))

#!markdown

## 2. Key Definitions & Formal Statements

Now we transition from basic REPL exploration to mathematical definitions. This follows the approach in *The Haskell Road* where we formalize mathematical concepts in functional code.

### 2.1 Divisibility (`divides`)

**Mathematical Definition**: _d_ divides _n_ if and only if _n mod d_ = 0.

**F# Signature**: `val divides : int -> int -> bool`

Let's implement this fundamental concept:

#!csharp

// Implementation of divisibility
let divides d n = n % d = 0

// Test the function
divides 3 12    // true, since 12 = 3 * 4
divides 5 12    // false, since 12 mod 5 = 2
divides 2 8     // true, since 8 = 2 * 4
divides 7 21    // true, since 21 = 7 * 3

#!markdown

#### üîç Exercise 3: Least Divisor > 1 (LD) in Action

**Definition**: LD(n) = the smallest integer greater than 1 that divides n.

**Existence**: For n > 1, n itself divides n, so the set of divisors > 1 is non-empty.

**Proposition 1.2** (from *The Haskell Road*):
1. If n > 1, then LD(n) is prime.
2. If n > 1 and n is composite, then (LD(n))¬≤ ‚â§ n.

**Proof Sketches**:
1. If LD(n) = c weren't prime, write c = a¬∑b with 1 < a < c ‚üπ a|n contradicts minimality.
2. If n = c¬∑a, with c = LD(n), then a ‚â• c ‚üπ c¬≤ ‚â§ c¬∑a = n.

#!csharp

// Algorithm for finding Least Divisor
// Helper function: LDF (k, n) - find least divisor of n that's ‚â• k

let rec ldf k n =
    if divides k n then
        k                    // Case 1: k divides n ‚Üí return k
    elif k * k > n then
        n                    // Case 2: k¬≤ > n ‚Üí no smaller factors, n is prime
    else
        ldf (k + 1) n       // Otherwise: try k+1

// LD via LDF - start checking from 2
let ld n = ldf 2 n

// Test the algorithm
ld 15    // Should return 3 (smallest divisor > 1)
ld 17    // Should return 17 (17 is prime)
ld 91    // Should return 7 (91 = 7 * 13)

#!markdown

## 3. Prime Testing (`prime0`)

Combining our LD function with the mathematical propositions, we can create an efficient primality test.

**Key Insight**: A number n > 1 is prime if and only if its least divisor equals itself.

**Algorithm**: 
- If n < 2 ‚Üí error (primality undefined for n < 2)
- Otherwise: n is prime ‚ü∫ ld(n) = n

#!csharp

// Prime testing function
let prime0 n =
    if n < 2 then
        failwith "Input must be ‚â• 2"
    else
        ld n = n

// Test the prime function
prime0 2      // true (2 is prime)
prime0 17     // true (17 is prime)  
prime0 97     // true (97 is prime)
prime0 15     // false (15 = 3 * 5)
prime0 91     // false (91 = 7 * 13)

// Test edge cases that should fail
// prime0 1      // This would throw an error
// prime0 0      // This would throw an error

#!markdown

## 4. REPL Exercises & Exploration

Now let's use our functions interactively, as you would in a real FSI session. These exercises help solidify understanding of the algorithms and their mathematical foundations.

### üß™ Try It Yourself!

#!csharp

// Exercise 1: Compute ld 91 (following textbook example)
ld 91    // Expected: 7

// Exercise 2: Test some prime numbers
prime0 97    // Expected: true
prime0 101   // Expected: true

// Exercise 3: Test some composite numbers
prime0 100   // Expected: false
prime0 77    // Expected: false (77 = 7 * 11)

// Exercise 4: Explore the divisibility function
divides 7 91     // true, since 91 = 7 * 13
divides 13 91    // true, since 91 = 7 * 13
divides 11 91    // false

// Exercise 5: Understand the LD algorithm step by step
ldf 2 91    // Start checking from 2
ldf 3 91    // Check from 3  
ldf 7 91    // Check from 7 - this should return 7

#!markdown

---

## 5. What We've Learned from *The Haskell Road*

In this lesson, we've implemented fundamental concepts from Sections 1.1‚Äì1.2 of *The Haskell Road to Logic, Math and Programming*, adapted to F#:

### üßÆ Core Mathematical Concepts
1. **Divisibility** - The foundation of number theory
2. **Least Divisor (LD)** - Key to understanding prime factorization  
3. **Primality Testing** - Efficient algorithm based on mathematical propositions
4. **Formal Proofs** - Understanding why the algorithms work

### üíª F# Programming Techniques
1. **REPL-driven development** - Interactive exploration and testing
2. **Recursive algorithms** - The `ldf` function demonstrates tail recursion
3. **Function composition** - Building complex logic from simple parts
4. **Mathematical precision** - Translating formal definitions into code

### üîÆ Looking Ahead

The next lessons will build on these foundations:
- **Recursive data structures** (Lists, Trees)
- **Higher-order functions** (map, filter, fold)
- **Proof techniques** (Mathematical induction, structural induction)
- **Logic and reasoning** (Propositional logic, predicate logic)

---

### üìñ Textbook Connection

| Section | *The Haskell Road* Content | Our F# Implementation |
|---------|---------------------------|----------------------|
| 1.1 | Getting Started with Hugs | F# Interactive (FSI) |
| 1.2 | Defining Functions | `divides`, `ldf`, `ld`, `prime0` |
| 1.2 | Proposition 1.2 | Mathematical foundation for our algorithms |

---

#!csharp

// üéØ Exploration Exercises (Textbook Style)

// 1. Test edge cases for input validation
// Uncomment to see error handling:
// prime0 1
// prime0 0

// 2. Verify Proposition 1.2 part 2: If n is composite, then (LD(n))¬≤ ‚â§ n
let n = 91
let ldN = ld n
printfn "n = %d, LD(n) = %d, (LD(n))¬≤ = %d" n ldN (ldN * ldN)
// Since 91 = 7 * 13 is composite, we should have 7¬≤ = 49 ‚â§ 91 ‚úì

// 3. Explore larger numbers
ld 1001    // What's the smallest divisor of 1001?
prime0 1009  // Is 1009 prime?

// 4. Understanding the algorithm's efficiency
// The ldf function stops checking at k¬≤ > n, making it efficient
let testNum = 97
let sqrtApprox = int (sqrt (float testNum))
printfn "For n = %d, we only need to check up to ‚àön ‚âà %d" testNum sqrtApprox

#!markdown

---

## üìö References & Further Reading

#!markdown

### Primary Sources

#### [HR] The Haskell Road to Logic, Math and Programming
- **Authors**: Kees Doets, Jan van Eijck  
- **Publisher**: King's College Publications  
- **Sections Used**: 1.1‚Äì1.2
- **Key Concepts**: 
  - Section 1.1: Getting Started with Hugs (adapted to F# Interactive)
  - Section 1.2: Implementing a Prime Number Test
  - Proposition 1.2: Mathematical foundations of the LD algorithm
- **Adaptation Notes**: Original Haskell syntax converted to F# with equivalent functionality

#### [CM] Concrete Mathematics  
- **Authors**: Ronald Graham, Donald Knuth, Oren Patashnik
- **Publisher**: Addison-Wesley  
- **Sections Used**: Chapter 1 (logical inference, intro proof)
- **Relevance**: Foundational proof techniques and mathematical reasoning

#### [GA] Contemporary Abstract Algebra
- **Author**: Joseph Gallian
- **Publisher**: Cengage Learning  
- **Sections Used**: Appendix A (proof strategies)
- **Relevance**: Mathematical proof methodology and strategies

#!markdown

### F# Technical Resources

#### Microsoft F# Documentation
- **F# Interactive Guide**: [docs.microsoft.com/fsharp/tools/fsharp-interactive](https://docs.microsoft.com/en-us/dotnet/fsharp/tools/fsharp-interactive/)
- **F# Language Reference**: [docs.microsoft.com/fsharp/language-reference](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/)

#### Key F# Functions Used
- `pown : int -> int -> int` - Integer exponentiation
- `% : int -> int -> int` - Modulo operator  
- `sqrt : float -> float` - Square root function
- `printfn : string -> 'a -> unit` - Formatted printing

### Mathematical Background

#### Number Theory Concepts
1. **Divisibility Relation**: d | n ‚ü∫ n mod d = 0
2. **Prime Numbers**: Numbers with exactly two positive divisors
3. **Least Divisor Property**: LD(n) characterizes primality
4. **Algorithm Efficiency**: ‚àön bound for trial division

#### Proof Techniques Demonstrated
- **Direct Proof**: Showing LD(n) exists for n > 1
- **Proof by Contradiction**: Proving LD(n) is prime
- **Mathematical Induction**: Implicit in recursive algorithm design

#!markdown

### üîó Cross-References

**Previous**: None (This is Lesson 1)  
**Next**: [Lesson 2 - Writing Simple Tests & Reasoning About Primes](../module1_lesson2_prime_reasoning.dib)  
**Module Overview**: [Module 1 - Logic, Programming, and Reasoning](../module1.md)  
**Course Home**: [F# Learning Path](../../../README.md)

#!markdown

### üìñ Citation Format

When referencing this lesson:
> Module 1, Lesson 1: Getting Started with F# Interactive. *Learn F# Functional Programming Curriculum*. Based on Doets & van Eijck, *The Haskell Road to Logic, Math and Programming*, Sections 1.1‚Äì1.2.

### üéì Learning Assessment

**Self-Check Questions:**
1. Can you implement the `divides` function from memory?
2. Do you understand why LD(n) is always prime for n > 1?
3. Can you trace through the `ldf` algorithm execution?
4. Do you grasp the ‚àön efficiency insight?

**Next Steps:**
- Practice with larger numbers using the prime testing functions
- Explore the mathematical proofs in more detail
- Prepare for recursive data structures in upcoming lessons
